<Application x:Class="EventPlannerWPF.View.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:EventPlannerWPF.View"
             xmlns:controls="clr-namespace:EventPlannerWPF.View.Controls"
             xmlns:services="clr-namespace:EventPlannerWPF.View.Services">
    <Application.Resources>

        <services:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
        <services:AddLeftPaddingConverter x:Key="AddLeftPaddingConverter" />

        <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
            <Setter Property="MinWidth" Value="5" />
            <Setter Property="Width" Value="5" />
        </Style>

        <Style x:Key="TitleText" TargetType="TextBlock">
            <Setter Property="FontSize" Value="36" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="TextAlignment" Value="Center" />
            <Setter Property="Foreground" Value="#FFFFFF" />
        </Style>

        <Style x:Key="NormalText" TargetType="TextBlock">
            <Setter Property="FontSize" Value="16" />
            <Setter Property="LineHeight" Value="28" />
            <Setter Property="TextWrapping" Value="Wrap" />
            <Setter Property="TextAlignment" Value="Center" />
            <Setter Property="Foreground" Value="#FFFFFF" />
        </Style>

        <Style x:Key="StrikeThroughTextBlock" TargetType="TextBlock">
            <Setter Property="TextDecorations" Value="None" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsCompleted}" Value="True">
                    <Setter Property="TextDecorations" Value="Strikethrough" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="RoundCheckBox" TargetType="CheckBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <StackPanel Orientation="Horizontal">
                            <Grid Width="16" Height="16">
                                <Ellipse Stroke="Black" StrokeThickness=".8" Fill="White" />
                                <Path Margin="-1 -4 0 0" x:Name="CheckMark" Data="M 5 9 L 8 15 L 17 1" Stroke="Black" StrokeThickness="2" Visibility="Collapsed" />
                            </Grid>
                            <ContentPresenter VerticalAlignment="Center" Margin="10,0,0,0" />
                        </StackPanel>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="RoundButton" TargetType="{x:Type Button}">
            <Setter Property="FontSize" Value="14" />
            <Setter Property="Width" Value="170" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="#FDFEFE" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="25" Padding="15" BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="FocusVisualStyle">
                <Setter.Value>
                    <Style>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Border BorderBrush="{TemplateBinding Foreground}" CornerRadius="25" Padding="15" BorderThickness="1">
                                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#e8e8e8" />
                    <Setter Property="Foreground" Value="DimGray" />
                </Trigger>
                <Trigger Property="IsMouseCaptured" Value="True">
                    <Setter Property="Background" Value="#d9d9d9" />
                    <Setter Property="Foreground" Value="DimGray" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="GreenRoundButton" TargetType="{x:Type Button}" BasedOn="{StaticResource RoundButton}">
            <Setter Property="Width" Value="200" />
            <Setter Property="Background" Value="#3AB19B" />
            <Setter Property="Foreground" Value="#FDFEFE" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="25" BorderBrush="#49B7A3" Padding="15" BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#339685" />
                    <Setter Property="Foreground" Value="White" />
                </Trigger>
                <Trigger Property="IsMouseCaptured" Value="True">
                    <Setter Property="Background" Value="#2d7a6c" />
                    <Setter Property="Foreground" Value="White" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="YellowRoundButton" TargetType="{x:Type Button}" BasedOn="{StaticResource RoundButton}">
            <Setter Property="Background" Value="#FFFFD500" />
            <Setter Property="Foreground" Value="#FF363636" />
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#FFF9D000" />
                    <Setter Property="Foreground" Value="#FF363636" />
                </Trigger>
                <Trigger Property="IsMouseCaptured" Value="True">
                    <Setter Property="Background" Value="#FFF9D000" />
                    <Setter Property="Foreground" Value="DimGray" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="TransparentRoundButton" TargetType="{x:Type Button}" BasedOn="{StaticResource RoundButton}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="#FDFEFE" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="25" BorderBrush="White" Padding="15" BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#e8e8e8" />
                    <Setter Property="Foreground" Value="DimGray" />
                </Trigger>
                <Trigger Property="IsMouseCaptured" Value="True">
                    <Setter Property="Background" Value="#d9d9d9" />
                    <Setter Property="Foreground" Value="DimGray" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="UserButton" TargetType="{x:Type Button}">
            <Setter Property="FontSize" Value="14" />
            <Setter Property="Background" Value="#3AB19B" />
            <Setter Property="Foreground" Value="#FDFEFE" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="20" BorderBrush="#49B7A3" Padding="10" BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#339685" />
                    <Setter Property="Foreground" Value="White" />
                </Trigger>
                <Trigger Property="IsMouseCaptured" Value="True">
                    <Setter Property="Background" Value="#2d7a6c" />
                    <Setter Property="Foreground" Value="White" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="CalendarButton" TargetType="{x:Type Button}">
            <Setter Property="BorderBrush" Value="{x:Null}"/>
            <Setter Property="Background" Value="{x:Null}"/>
            <Setter Property="BorderThickness" Value="0,0,0,0"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid>
                            <Border x:Name="BackgroundBorder" Background="Transparent" CornerRadius="5" Margin="-5"/>
                            <ContentPresenter VerticalAlignment="Center"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="BackgroundBorder" Property="Background" Value="#e8e8e8"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="NoteButton" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="border" Property="Opacity" Value="0.65"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="border" Property="Height" Value="13"/>
                                <Setter TargetName="border" Property="Width" Value="13"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="PlaceholderTextBox" BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type controls:PlaceholderTextBoxControl}">
            <Setter Property="FontSize" Value="14" />
            <Setter Property="Foreground" Value="#878787" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Background" Value="#f6f6f6" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type controls:PlaceholderTextBoxControl}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <ScrollViewer x:Name="PART_ContentHost" />
                                <TextBlock
                                    Padding="{TemplateBinding Padding, Converter={StaticResource AddLeftPaddingConverter}, ConverterParameter=3}"
                                    Margin="0 1 0 0"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="Center"
                                    IsHitTestVisible="False"
                                    Foreground="#acb0af" 
                                    FontSize="14" 
                                    FontFamily="Cambria"
                                    Text="{TemplateBinding Placeholder}"
                                    Visibility="{TemplateBinding IsEmpty, Converter={StaticResource BoolToVisibilityConverter}}" />
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ArrowButton" TargetType="Button">
            <Setter Property="Background" Value="#363636" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Width" Value="60" />
            <Setter Property="Height" Value="60" />
            <Setter Property="Margin" Value="0 20 0 0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="50" Padding="5">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#000000" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="IconApp" TargetType="Button">
            <Setter Property="VerticalAlignment" Value="Top" />
            <Setter Property="HorizontalAlignment" Value="Right" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid>
                            <Ellipse x:Name="hoverCircle" 
                                     Fill="LightGray" 
                                     Opacity="0" 
                                     Width="25" 
                                     Height="25" 
                                     HorizontalAlignment="Center" 
                                     VerticalAlignment="Center"/>

                            <TextBlock Text="✖" 
                                       FontSize="14" 
                                       Foreground="Black" 
                                       HorizontalAlignment="Center" 
                                       VerticalAlignment="Center"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="hoverCircle" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="CalendarDayCell" TargetType="Border">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0.5"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="CornerRadius" Value="60"/>
            <Setter Property="Height" Value="75"/>
            <Setter Property="Width" Value="75"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#e64a5d"/>
                    <Setter Property="BorderBrush" Value="DarkGray"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="CalendarDayButton" TargetType="Button">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0.5"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="Height" Value="70"/>
            <Setter Property="Width" Value="70"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid>
                            <Border x:Name="BackgroundBorder" Background="{TemplateBinding Background}" CornerRadius="60" Margin="-5"/>
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                <Setter TargetName="BackgroundBorder" Property="Background" Value="#e64a5d"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                                <Setter TargetName="BackgroundBorder" Property="Background" Value="Transparent"/>
                            </DataTrigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="BackgroundBorder" Property="Background" Value="#e8354b"/> 
                                <Setter Property="BorderBrush" Value="DarkGray"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MenuItemWithDropdown" TargetType="MenuItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Border x:Name="border" Background="#ebebeb" BorderThickness="0" Height="30" Width="175" CornerRadius="10">
                            <Grid>
                                <!-- Icon -->
                                <ContentPresenter ContentSource="Icon"
                                                  HorizontalAlignment="Left"
                                                  VerticalAlignment="Center"
                                                  Height="25"
                                                  Width="25"
                                                  Margin="5,0,0,0" />

                                <!-- Text -->
                                <ContentPresenter ContentSource="Header"
                                                  TextBlock.Foreground="#0f0f0f"
                                                  TextBlock.FontFamily="Cambria"
                                                  TextBlock.FontSize="15"
                                                  HorizontalAlignment="Left"
                                                  VerticalAlignment="Center"
                                                  Margin="36,0,0,0" />

                                <!-- Dropdown Icon -->
                                <Image Source="/Resources/not_white_expand_arrow_32x32.png"
                                       Height="24"
                                       HorizontalAlignment="Right"
                                       Margin="0,0,10,0">
                                    <Image.RenderTransform>
                                        <RotateTransform x:Name="DropdownIconRotate" Angle="180" />
                                    </Image.RenderTransform>
                                    <Image.RenderTransformOrigin>0.5,0.5</Image.RenderTransformOrigin>
                                </Image>

                                <!-- Popup -->
                                <Popup x:Name="PART_Popup"
                                       AllowsTransparency="True"
                                       IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                       Placement="Top"
                                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">

                                    <Border x:Name="SubMenuBorder" Background="White" BorderBrush="White">
                                        <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas HorizontalAlignment="Left" VerticalAlignment="Top" />
                                                <ItemsPresenter x:Name="ItemsPresenter" />
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#e5e5e5" />
                                <Setter Property="BorderBrush" TargetName="border" Value="#e5e5e5" />
                            </Trigger>
                            <Trigger Property="IsSubmenuOpen" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#cdcdcd" />
                                <Setter Property="BorderBrush" TargetName="border" Value="#cdcdcd" />
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="DropdownIconRotate" 
                                                             Storyboard.TargetProperty="Angle" 
                                                             To="0" 
                                                             Duration="0:0:0.2" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="DropdownIconRotate" 
                                                             Storyboard.TargetProperty="Angle" 
                                                             To="180" 
                                                             Duration="0:0:0.2" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="SubMenuItem" TargetType="MenuItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Border x:Name="border" Background="#ebebeb" BorderThickness="0" CornerRadius="10" Margin="0,0,0,5">
                            <Grid>
                                <!--// Icon //-->
                                <ContentPresenter ContentSource="Icon"
                                                  HorizontalAlignment="Left"
                                                  VerticalAlignment="Center"
                                                  Height="18"
                                                  Width="18"
                                                  Margin="8,0,0,0" />

                                <!--// Text //-->
                                <ContentPresenter ContentSource="Header"
                                                  TextBlock.Foreground="#0f0f0f"
                                                  TextBlock.FontFamily="Cambria"
                                                  TextBlock.FontSize="15"
                                                  HorizontalAlignment="Left"
                                                  VerticalAlignment="Center"
                                                  Margin="35,0,0,0" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#e5e5e5" />
                                <Setter Property="BorderBrush" TargetName="border" Value="#e5e5e5" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#cecece" />
                                <Setter Property="BorderBrush" TargetName="border" Value="#cecece" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="RoundMenu" TargetType="Menu" BasedOn="{StaticResource {x:Type Menu}}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Menu">
                        <Border Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="1"
                                CornerRadius="5">
                            <ItemsPresenter />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Application.Resources>
</Application>